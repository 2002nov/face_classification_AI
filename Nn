import cv2

def initialize_video(video_path):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error: Could not open video.")
        exit()
    return cap

def load_haar_cascade(haar_cascade_path):
    face_cascade = cv2.CascadeClassifier(haar_cascade_path)
    if face_cascade.empty():
        print("Error: Could not load Haar Cascade.")
        exit()
    return face_cascade

def process_frame(frame, face_cascade, printer_model):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
    cv2.putText(frame, printer_model, (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
    return frame

def main():
    video_path = '/home/rvp/Work_Student2024/Bow/videotest03.mp4'
    haar_cascade_path = cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
    printer_model = "MFC-L5900DW"
    
    cap = initialize_video(video_path)
    face_cascade = load_haar_cascade(haar_cascade_path)
    
    while cap.isOpened():
        ret, frame = cap.read()
        if ret:
            frame = process_frame(frame, face_cascade, printer_model)
            cv2.imshow('Video', frame)
            if cv2.waitKey(25) & 0xFF == ord('q'):
                break
        else:
            break
    
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
